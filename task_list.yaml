TODO:
^^^^^

Passwords:
^^^^^^^^^^
Implement passwords design in retroshare, using local storage.
- [Done] implement account creation
  - [Done] 3: KKS ← generateKey()
           KKS used to encrypt FKS, the encrypted file with PGP data
  - [Done] 4: FKS ← encryptKKS (Kx1||Kx2|| . . .)
           encrypt PGP auth data into FKS
  - [Done] 5: fKS ← Storage.create(FKS)
           write FKS (encrypted PGP auth data) into local storage
  - [Done] 6: salt ← generateSalt()
  - [Done] 8: KLI ← KDF(salt,passwd)
           keyDerivationFunction() uses SHA1 to generate KLI from salt and password
  - [Done] 9: KW ← generateKey() // suitable for the storage system
  - [Done] 10: FLI ← salt||encrypt(KLI) (fKS||KKS||KW ||devmap)
    - [Done] implement fn which concatenates the salt + data buffers and returns as a single buffer
    - [Done] Encrypt concatenated data [salt||encrypt(KLI, (fKS||KKS||KW))] using using symmetric key KLI (aes encrypt/decrypt)
  - [Done] 11: fLI ← Storage.create(FLI) - using KW
           write the fLI file to disk/storage/DHT
  - [Done] 12: while DHT.put(uname, fLI) fails
- [Done] test account creation
  - [Done] test encrypt/decrypt input/output match (i.e. encrypt/decrypt do not mangle data)
  - [Done] test keyDerivationFunction: KLI ← KDF(salt,passwd)
  - [Done (sorta)] move the test into a proper unittest
    - [Done] I tried to already but hit issues with relative includes for the project.
- [Done] hook into retroshare main executable
- [Done] implement login
  - [Done] interactive login
    - [Done] 10: fLI ← DHT.get(uname)
    - [Done] 11: FLI ← Storage.read(fLI)
    - [Done] decrypt metadata file
      - [Done] 12: salt ← FLI.salt // stored in plaintext
      - [Done] 13: KLI ← KDF(salt,passwd)
      - [Done] 14: fKS, KKS, KW, devmap ← decryptKLI (FLI)
    - [Done] unittest case

DHT:
^^^^
- [Done] need to trace through how queries and results are handled
  bdiface::libbitdht/src/bitdht/bdiface.h
  class BitDhtCallback:
      dhtPeerCallback
      dhtValueCallback
      dhtInfoCallback
- [Done] how to send queries:
  bdNode::send_query(bdId *id, bdNodeId *targetNodeId)
  msgout_find_node(id, &transId, targetNodeId);
  - trying to figure out the stack/how/when bitdht sends a find_node message
  - it appears to be the only handled incoming message in bdnode? surely not, rs must support the other bittorrent calls right?
    Nope!
  - even if find_node is enough, how do you go from find_node to getting a key:value from the find_node call? I dont think you can.
    RS doesn't do this, a node has an IP addr and that's all RS needs to connect. So RS doesn't actually write or read from the DHT itself.

- [Done] get_hash
  - [Done] 4 messages required:
    - [Done] msgout_get_hash
      implemented but not hooked up
      // get_hash (bittorrent get_peers) - get a value for a key from the DHT
      void msgout_get_hash(bdId *id, bdToken *transId, bdNodeId *info_hash);
      - [Done] add a bdNode::send_get_hash_query() fn to call it
      - [Done] make sure it passes through the correct params for msgout_get_hash
    - [Done] msgin_get_hash
      implemented and hooked up
      void msgin_get_hash(bdId *id, bdToken *transId, bdNodeId *nodeid);
    - msgout_reply_hash
      Implemented, but not hooked up in processRemoteQuery.
      When called it will need to be passed the hash value to return,
      which seems to be a list of strings.
      void msgout_reply_hash(bdId *id, bdToken *transId,
                             bdToken *token, std::list<std::string> &values);
      - [Done] return hardcoded test value for now
      - processRemoteQuery needs to read the value for the given hash(key)
        from local hash store.
        - where on earth is the local hash store?
        - read from it and pass the found hash value to msgout_reply_hash()
        - NOTE: this is where normally it reads all of the ip:ports of the
          peers that are downloading the bittorrent filehash. In this new
          PasswordsAuth version the data we want to fetch is not a
          std::list<std::string> &values
          like in bdNode.cc, but instead is a char* (an encrypted file).
          - update processRemoteQuery to fetch and return a single blob
          - possibly rename all of these fns to reflect the fact that they're a
            special case and not the standard gethash fn call?
          - possibly change the messageID of these messages to also reflect
            that fact, it also means that these new msgs won't get confused
            with the standard getHash set of messages.
    - [Done] msgin_reply_hash
      hooked up, but doesn't extract hash from msg
      void msgin_reply_hash(bdId *id, bdToken *transId,
                            bdToken *token, std::list<std::string> &values);
      - [Done] need to return query results to original query code.
        How does RS code do this? Check find_peer() code.
        bdNode is already the place to handle this code, so it calls the code
        directly to bdNode::addPeer()
      - [Done] add a fn call to PasswordsAuth::getHashCallback()
      - [Done] check base message format, this fn expects a list of strings which are
        probably ip:ports of the bittorrent peers downloading that file info_hash.
        How will this work with our case, when we're returning a single 'file' blob.
        - am just returning the file blob as a single string

  - [Done] add test code to get_hash()
    - [Done] getHash() must specify a bdId to make the request against.
      Look at where bdNode.cc::send_query() is called, and how the
      bdId and bdNodeId is formed for that call.
    - [Done] adding in the 'external' (udbbitdht) access to bdNode::send_get_hash_query
    - [Done] I might have to use the dhtValueCallback callback, which gives a string as a fn param (i.e. the returning hash data)
      - [Done] how do I make sure that my fn uses the dhtValueCallback?
    - [Done] when you make a query:
      - [Done] is the bdId the id of the peer that the query is made against?
      - [Done] Do we specify a peer to make the query against?
        Not for find node, I am not sure about get_hash(). Might have to make
        a find_node request to get the node with our hash, then make a
        get_hash request to that node.
      - [Done] does the query take care of finding the correct peer to make the query against?
        How does findNode work? It must go through multiple phases of near nodes to find the actual nodes?
        This is taken care of by bdQuery, and the query state. See
        int bdQuery::nextQuery(bdId &id, bdNodeId &targetNodeId)
        bool bdQuery::result(std::list<bdId> &answer)
        and also in bdNode::processRemoteQuery()
          mNodeSpace.find_nearest_nodes(&(query.mQuery), BITDHT_QUERY_NEIGHBOUR_PEERS, nearest);
      - do we need to add support for findHash to bdQuery or bdQueryMananger?

  - [Not Doing] Need the bdQueryManager to handle peer get hash queries.
    shortcircuited this
    - bdQueryManager only understands find_node queries
    - bdQueryManager handles multiple step find_node queries
      (i.e. finding closest to target you know about, it tells you a closer
       node so you query the closer, repeat till you find your actual node)
      but it doesn't do this at all for get_hash queries.
    - BAH. msgout_reply_hash() will have to handle the situation of the current
      node not having the hash. If it doesn't have the hash, the node is
      supposed to return a list of nodes that are the closest it knows about
      to the peer which should have that hash.
      - this also means that

- implement a hash table in libbitdht
  (╯°□°）╯︵ ┻━┻)
  it's calling itself a dht with no actual hash table in place
  - need to figure out the logic for bdNodeId -> key
    so that lookup can determine which node to go to for a specific key
    - "Two node ID's or a node ID and a key are XORed and the result is the distance between them. ""
      distance metric between nodeid and key
      http://en.wikipedia.org/wiki/Kademlia#Accelerated_lookups
  - then the hash table lookup can just use one node, we don't need to
    handle the full (find node which has my hash) logic
  - add support to query manager for get hash query type
    - will probably need it's own set of steps if i have to add support
      for finding the actual node using multiple retries
      (same as existing find node logic, perhaps reuse that first)

  - [Done] finish bdHandler::BitDhtHandler::GetHash
  - [Done] finish getHash in auth/udp msgtest
  - [Done] passing get_hash a targetNodeId, is this used when creatig the msgout_get_hash?
  - [Done] get two debug versions of retroshare talking
  - [Done] debug through get_hash() message on both peers

- post_hash
  - [Done] write message types in bdmsgs
    // post hash should determine the filename (i.e. key) if possible
    // post_hash (bittorrent announce_peers) - write a key:value to the DHT
    // TODO: implemented but not hooked up, will need to give it a key:value to write
    void msgout_post_hash(bdId *id, bdToken *transId, bdNodeId *info_hash,
    // TODO: hooked up to recv() but does nothing.
    //       It should queue a query which then calls msgout_reply_post
    void msgin_post_hash(bdId *id,  bdToken *transId,
                         bdNodeId *info_hash,  uint32_t port, bdToken *token);
    // TODO: not queued by msgin_post_hash
    //       need to add code to processRemoteQuery to handle sending this response
    void msgout_reply_post(bdId *id, bdToken *transId);
    // TODO: hooked up to recv()? but does nothing.
    void msgin_reply_post(bdId *id, bdToken *transId);

  - REQUEST
    - [Done] msgout_post_hash
      - [Done] bsmsgs::bitdht_post_hash_msg
    - bdnode::recvPkt() msgin_post_hash
      - [Done] bsmsgs::beMsgType(),  post_hash, BITDHT_MSG_TYPE_POST_HASH
      - bdnode::recvPkt()
****        - need to figure out how to write my data, and read my data,
          from bencoded format
      - [Done] bdnode::msgin_post_hash
  - [Done] RESPONSE
    - [Done] msgout_reply_post_hash
      - [Done] bdmsgs::bitdht_reply_post_hash_msg
    - [Done] bdnode::recvPkt() msgin_reply_post_hash
      - [Done] bsmsgs::beMsgType() - used "phr" in message
      - [Done] bdnode::recvPkt() - BITDHT_MSG_TYPE_REPLY_POST_HASH
      - [Done] bdnode::msgin_reply_post_hash

  - check dhtPeerCallback
    - where is it called from on msg reply? do I need to fix it for post_hash?
  - add support to dhtPeerCallback for two types of query
    - or just add another callback



-------------------------------------------------------------------------------

Hook up passwords auth to post/gethash code test.

    - PasswordsAuth update to handle async messages & callbacks
      Need to break each place in PasswordsAuth() which does a getHash into two fns:
      - DHT getHash
      - setHashResult
      - get uname->fLI
      - get fLI->FLI
      - get kKS->KKS


-------------------------------------------------------------------------------


  - hook up to RS code
    - add code to rsinit.cc which sends a gethash() query
      rsUdpStack *mDhtStack = new rsUdpStack(UDP_TEST_RESTRICTED_LAYER, tmpladdr);
    -
    - bdNode::send_get_hash_query()
      where in RS should call this? need to go through managers code to see
      what should call it

- BOLLOCKS: HOW THE DO I MAKE SURE THAT ONE OF MY DEBUG DHT NODES IS THE
  ONE THAT HANDLES THE GET_HASH() OR POST_HASH() QUERY?


- Then unittest or get RS into a test case to verify we get or send data.
  If this doesn't work out of the box, debugging could take a _lot_ of time.


Passwords Nice to Haves:
^^^^^^^^^^^^^^^^^^^^^^^^
- save entire PGP key
  - [Done] currently saving only public part of PGP key. Look at what is in a PGP key,
  - add entire PGP key into FKS
  - locate in code where retroshare loads the local PGP key
    - look n rsinit.cc, that's where they load the gpg/pgp key
- update from local storage to using DHT storage
- move the metadata file and key store file into their own classes
  and have those classes know how to serialise/deserialize their data.

- Implement multi device login
  Login devmap in metadata.
  Allows multiple devices to save log in credentials and
  user to revoke all devices via devmap.
  - save login credentials Locally
    - implement devmap in metadata file (FLI)
  - 1: fDL, KDL ← Device.readLocalStore()
  - 2: if fDL "= NULL then // non-interactive login
  - 3: FDL ← Storage.read(fDL)
  - 4: fKS, KKS ← decryptKDL(FDL)
  - 5: saveLoginLocally ← False
  - 16: FKS ← Storage.read(fKS)
  - 17: Kx1, Kx2,... ← decryptKKS (FKS)
  - 18: if saveLoginLocally then
  - 19: KDL ← generateKey()
  - 20: FDL ← encryptKDL(fKS||KKS)
  - 21: fDL ← Storage.create(FDL)
  - 22: Device.writeLocalStore(fDL||KDL)
  - 23: devmap.append(Device.ID, fDL||KDL)
  - 24: FLI ← salt||encryptKLI (fKS||KKS||KW||devmap)
  - 25: Storage.write(fLI,FLI) // using KW
  - 26: end if
  - write unittest case


paper notes:
^^^^^^^^^^^^
- distributed storage allows for brute forcing
- why is the salt in plaintext, makes it easier to hack/brute force
- what determines the message type enum values? they must be shared with bittorrent, otherwise the bittorrent nodes wouldn't be able to handle them. The message format must be shared too.
- retroshare uses a node entry to hold the IP, so they don't actually write to the DHT key:value.
- if in DHT, how far and to how many clients will the PGP key file be shared?
  - Is it just one host? do dht nodes share their DHT space as well as their node space? They must do...
  - what are the odds of your data becoming unavailable in a small DHT network? keep a copy locally just in case?
    DHT nodes network do not have to be friends, the data should be available assuming the DHT replicates the hash
    table data amongst nodes. i.e. when nodes go offline their data is already replicated to other nodes in their bucket.
- how you never find the exact peer in a DHT, just closest matches - so what if your closest matches go offline
- how the poster of the has is responsible for posting the hash, and keeping it alive on other nodes (i.e. poster is responsible for replication amongst other nodes)
